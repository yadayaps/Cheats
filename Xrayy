local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "MapXrayGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 260, 0, 160)
mainFrame.Position = UDim2.new(0.5, -130, 0.5, -80)
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Visible = false
mainFrame.Parent = screenGui

local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 8)
uiCorner.Parent = mainFrame

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundTransparency = 1
title.Font = Enum.Font.GothamBold
title.Text = "Map X-Ray"
title.TextColor3 = Color3.fromRGB(150, 200, 255)
title.Parent = mainFrame

local bindLabel = Instance.new("TextLabel")
bindLabel.Position = UDim2.new(0, 10, 0, 45)
bindLabel.Size = UDim2.new(0, 100, 0, 25)
bindLabel.BackgroundTransparency = 1
bindLabel.Font = Enum.Font.Gotham
bindLabel.Text = "Toggle Key:"
bindLabel.TextColor3 = Color3.fromRGB(200,200,200)
bindLabel.TextXAlignment = Enum.TextXAlignment.Left
bindLabel.Parent = mainFrame

local bindButton = Instance.new("TextButton")
bindButton.Position = UDim2.new(0, 110, 0, 45)
bindButton.Size = UDim2.new(0, 60, 0, 25)
bindButton.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
bindButton.Font = Enum.Font.GothamSemibold
bindButton.TextColor3 = Color3.new(1,1,1)
bindButton.Text = "None"
bindButton.Parent = mainFrame

local sliderLabel = Instance.new("TextLabel")
sliderLabel.Position = UDim2.new(0, 10, 0, 85)
sliderLabel.Size = UDim2.new(0, 150, 0, 25)
sliderLabel.BackgroundTransparency = 1
sliderLabel.Font = Enum.Font.Gotham
sliderLabel.Text = "Transparency:"
sliderLabel.TextColor3 = Color3.fromRGB(200,200,200)
sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
sliderLabel.Parent = mainFrame

local slider = Instance.new("Frame")
slider.Position = UDim2.new(0, 110, 0, 90)
slider.Size = UDim2.new(0, 120, 0, 10)
slider.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
slider.Parent = mainFrame

local sliderButton = Instance.new("Frame")
sliderButton.Size = UDim2.new(0, 10, 1, 0)
sliderButton.BackgroundColor3 = Color3.fromRGB(150, 200, 255)
sliderButton.Parent = slider

local draggingSlider = false
local targetTransparency = 0.5

slider.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		draggingSlider = true
	end
end)
slider.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		draggingSlider = false
	end
end)
UserInputService.InputChanged:Connect(function(input)
	if draggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
		local relX = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X, 0, 1)
		sliderButton.Position = UDim2.new(0, relX * (slider.AbsoluteSize.X - sliderButton.AbsoluteSize.X), 0, 0)
		targetTransparency = relX
	end
end)

local waitingForKey = false
local toggleKey
bindButton.MouseButton1Click:Connect(function()
	bindButton.Text = "Press..."
	waitingForKey = true
end)

UserInputService.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.Insert then
		mainFrame.Visible = not mainFrame.Visible
	end
	if waitingForKey and input.KeyCode ~= Enum.KeyCode.Insert then
		toggleKey = input.KeyCode
		bindButton.Text = input.KeyCode.Name
		waitingForKey = false
		return
	end
	if toggleKey and input.KeyCode == toggleKey then
		local enable = not script:GetAttribute("XrayActive")
		script:SetAttribute("XrayActive", enable)
	end
end)

local character = player.Character or player.CharacterAdded:Wait()
local originalTransparency = {}

local function applyTransparency(alpha)
	for _, part in ipairs(workspace:GetDescendants()) do
		if part:IsA("BasePart") and not part:IsDescendantOf(character) then
			if not originalTransparency[part] then
				originalTransparency[part] = part.Transparency
			end
			part.LocalTransparencyModifier = alpha
		end
	end
end

local function resetTransparency()
	for part in pairs(originalTransparency) do
		if part.Parent then
			part.LocalTransparencyModifier = 0
		end
	end
end

local isXrayActive = false
script.AttributeChanged:Connect(function(attr)
	if attr == "XrayActive" then
		isXrayActive = script:GetAttribute("XrayActive")
		if not isXrayActive then
			resetTransparency()
		end
	end
end)

RunService.RenderStepped:Connect(function()
	if isXrayActive then
		applyTransparency(targetTransparency)
	end
end)

local dragFrame = mainFrame
local draggingFrame = false
local dragInput, dragStart, startPos

local function update(input)
	local delta = input.Position - dragStart
	mainFrame.Position = UDim2.new(
		startPos.X.Scale,
		startPos.X.Offset + delta.X,
		startPos.Y.Scale,
		startPos.Y.Offset + delta.Y
	)
end

dragFrame.InputBegan:Connect(function(input)
	if draggingSlider then return end 
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		draggingFrame = true
		dragStart = input.Position
		startPos = mainFrame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				draggingFrame = false
			end
		end)
	end
end)

dragFrame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if draggingSlider then return end
	if input == dragInput and draggingFrame then
		update(input)
	end
end)
